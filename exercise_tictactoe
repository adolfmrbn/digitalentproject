# -*- coding: Adolf Yoshua Marbun -*-
"""
Spyder Editor

This is a temporary script file.
"""

#define the board
board = [[1, 2, 3],
         [4, 'X', 6],
         [7, 8, 9]]

# Game still going
game_still_going = True

def DisplayBoard(board):
# the function accepts one parameter containing the board's current status
# and prints it out to the console
    # Print the board
    print("+", "-"*7, "+", "-"*7, "+", "-"*7, "+")
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("|", " "*2, board[0][0], " "*2, "|", " "*2, board[0][1], " "*2, "|", " "*2, board[0][2], " "*2, "|")
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("+", "-"*7, "+", "-"*7, "+", "-"*7, "+")
            ########################################################
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("|", " "*2, board[1][0], " "*2, "|", " "*2, "X", " "*2, "|", " "*2, board[1][2], " "*2, "|")
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("+", "-"*7, "+", "-"*7, "+", "-"*7, "+")
            ########################################################
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("|", " "*2, board[2][0], " "*2, "|", " "*2, board[2][1], " "*2, "|", " "*2, board[2][2], " "*2, "|")
    print(" "*25, end="\n")
    print("|", " "*7, "|", " "*7, "|", " "*7, "|")
    print(" "*25, end="\n")
    print("+", "-"*7, "+", "-"*7, "+", "-"*7, "+")
        
def EnterMove(board):
# the function accepts the board current status, asks the user about their move, 
# checks the input and updates the board according to the user's decision     
    move = int(input("Enter your move from 1-9, but not 5 : ")) #user input
    if (move > 0) and (move < 10): # input must be in range 1 to  9
        #  change the number into an O
        if board[0][0] == move:
            board[0][0] = 'O'
        elif board[0][1] == move:
            board[0][1] = 'O'
        elif board[0][2] == move:
            board[0][2] = 'O'
        elif board[1][0] == move:
            board[1][0] = 'O'
        elif board[1][2] == move:
            board[1][2] = 'O'
        elif board[2][0] == move:
            board[2][0] = 'O'
        elif board[2][1] == move:
            board[2][1] = 'O'
        elif board[2][2] == move:
            board[2][2] = 'O'
    else:
        print("Please, enter a valid number!") 
        
    DisplayBoard(board) # update Board
    MakeListOfFreeFields(board) # store the unused number into this function
        
def MakeListOfFreeFields(board):
# the function browses the board and builds a list of all the free squares; 
# the list consists of tuples, while each tuple is a pair of row and column numbers
    empty = [] # empty list
    for i in range(len(board)): 
        for j in range(len(board[i])):
            if board[i][j] not in ['O', 'X']:
                empty.append(board[i][j]) # add the unused number to list 'empty'
    return empty

def VictoryFor(board, sign): 
# the function analyzes the board status in order to check if 
# the player using 'O's or 'X's has won the game
    # Check if each row has the same sign
    row_1 = board[0][0] == board[0][1] == board[0][0] == sign
    row_2 = board[1][0] == board[1][1] == board[1][2] == sign
    row_3 = board[2][0] == board[2][1] == board[2][2] == sign
    
    
    # Check if game has ended
    if row_1 or row_2 or row_3:
        game_still_going = False
    
    # Return the winner X or O
    if row_1:
        return print("The winner is", sign, ". Done!")
    elif row_2:
        return print("The winner is", sign, ". Done!")
    elif row_3:
        return print("The winner is", sign, ". Done!")
    
    # Check if each column has the same sign
    cols_1 = board[0][0] == board[1][0] == board[2][0] == sign
    cols_2 = board[0][1] == board[1][1] == board[2][1] == sign
    cols_3 = board[0][2] == board[1][2] == board[2][2] == sign
    
    # Check if game has ended
    if cols_1 or cols_2 or cols_3:
        game_still_going = False
    
    # Return the winner X or O
    if cols_1:
        return print("The winner is", sign, ". Done!")
    elif cols_2:
        return print("The winner is", sign, ". Done!")
    elif cols_3:
        return print("The winner is", sign, ". Done!")
    
    # Check if each diagonal has the same sign
    dia_1 = board[0][0] == board[1][1] == board[2][2] == sign
    dia_2 = board[0][2] == board[1][1] == board[2][0] == sign
    
    # Check if game has ended
    if dia_1 or dia_2:
        game_still_going = False
    
    # Return the winnner X or O
    if dia_1:
        return print("The winner is", sign, ". Done!")
    elif dia_2:
        return print("The winner is", sign, ". Done!")
        

def DrawMove(board):
# the function draws the computer's move and updates the board
    # Computer input
    import random 
    
    restnumber = MakeListOfFreeFields(board) # restnumber includes the unused 
                                             # number from the board after user's turn
    choice_x = random.choice(restnumber) # choose one random number from the list
    #  change the number into an X
    if board[0][0] == choice_x:
        board[0][0] = 'X'
    elif board[0][1] == choice_x:
        board[0][1] = 'X'
    elif board[0][2] == choice_x:
        board[0][2] = 'X'
    elif board[1][0] == choice_x:
        board[1][0] = 'X'
    elif board[1][2] == choice_x:
        board[1][2] = 'X'
    elif board[2][0] == choice_x:
        board[2][0] = 'X'
    elif board[2][1] == choice_x:
        board[2][1] = 'X'
    elif board[2][2] == choice_x:
        board[2][2] = 'X'
    DisplayBoard(board) # update Board
    
# main function to play
print('Welcome to Tic Tac Toe!')
DisplayBoard(board)
while game_still_going:
    EnterMove(board)
    VictoryFor(board, 'O')
    DrawMove(board)
    VictoryFor(board, 'X')
        

